
// Function to insert a node in a BST.(Recursion)
Node* insert(Node* root, int key) {
   Node* newnode=new Node(key);
   
   if(root==NULL)
   {
       return newnode;
   }
   else if(root->data<key)
   {
       root->right=insert(root->right,key);
   }
   else if(root->data>key)
   {
       root->left=insert(root->left,key);
   }
   return root;
}

//Iterative Approach

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* insertIntoBST(TreeNode* root, int key) {
       TreeNode*newnode=new TreeNode(key);
        
        if(root==NULL)
        {
            return newnode;
        }
        TreeNode*lptr=root;
        while(true)
        {
            if(lptr->val<key)
            {
                if(lptr->right!=NULL)
                {
                    lptr=lptr->right;
                }
                else
                {
                    lptr->right=newnode;
                    break;
                }
            }
           
            else if(lptr->val>key)
            {
                if(lptr->left!=NULL)
                {
                    lptr=lptr->left;
                }
                else
                {
                    lptr->left=newnode;
                    break;
                }
            }
            else
            {
                return root;
                break;
            }
        }
        return root;
    }
};
