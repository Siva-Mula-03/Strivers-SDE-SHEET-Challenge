class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        deque<int>dq;
        vector<int>ans;
        for(int i=0;i<nums.size();i++)
        {
            if(!dq.empty()&&dq.front()==i-k) //window completes so update pointer
            {
                dq.pop_front();
            }
            while(!dq.empty()&& nums[dq.back()]<=nums[i]) //checking max of all in nums[dequeindexes]
            {
                dq.pop_back();
            }
            dq.push_back(i);//push present index
            if(i>=k-1) //when max computation for one window completes push into conatiner
            {
                ans.push_back(nums[dq.front()]);
            }
        }
        return ans;
    }
};
